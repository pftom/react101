{
  "name": "React 入门教程",
  "description": "本篇教程通过构建一个井字棋游戏来讲解 React 的基础知识，是非常经典的 Learn by doing 的教授/学习技术的方式。通过学习本篇教程你不仅可以学习到如何使用脚手架初始化项目，学习 React 的基础知识如 props，state，组件等，还可以学习一些编写代码的最佳实践，最后完成一个带有 “时间旅行” 的井字棋游戏。相信你在学习完本篇教程之后，会成为这场游戏里面的最大胜者！",
  "id": "5c8fdb60a9cbfbc27aae247a4a4b7376",
  "created": "2019-11-13T03:11:19.855Z",
  "topics": [
    "React"
  ],
  "categories": [
    "前端",
    "React",
    "入门"
  ],
  "articles": [
    {
      "name": "用 React 实现一个井字棋游戏（一)",
      "description": "本篇教程通过构建一个井字棋游戏来讲解 React 的基础知识，是非常经典的 Learn by doing 的教授/学习技术的方式。通过学习本篇教程你不仅可以学习到如何使用脚手架初始化项目，学习 React 的基础知识如 props，state，组件等，还可以学习一些编写代码的最佳实践，最后完成一个带有 “时间旅行” 的井字棋游戏。相信你在学习完本篇教程之后，会成为这场游戏里面的最大胜者！",
      "id": "175b717"
    },
    {
      "name": "用 React 实现一个井字棋游戏（二）",
      "description": "这是 React 入门教程的第二部分，主要介绍了组件、不可变性、列表和 Key 等知识，通过再次进行组件状态提升 来强调其在 React 哲学中的重要地位。这一部分与上一部分很好的串联在一起，相比上一部分内容会更有难度一点。",
      "id": 3697248
    }
  ],
  "steps": [
    {
      "commit": "fd83d85",
      "id": "ixnxw2HB",
      "articleId": "175b717",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "fd83d85",
          "id": "ToUY1LYSp",
          "fixed": true,
          "children": [
            {
              "text": "代码准备"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将在这篇教程中学习制作一个小游戏。你可能不想看这个教程，因为你不是做游戏的 – 但是试着给它一个机会。在这篇教程中你学到的技术是构建一个 React 应用的基础，熟练掌握这些技术会让你更加深入的理解 React。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这篇教程被分为如下几个部分："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "#%E4%BB%A3%E7%A0%81%E5%87%86%E5%A4%87",
                      "text": "代码准备"
                    },
                    {
                      "text": " 将会给你学习这篇教程需要的初始代码框架。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "#%E9%80%9A%E8%BF%87-props-%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE",
                      "text": "通过 Prop 传递数据"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "link": true,
                      "url": "#%E7%BC%96%E5%86%99%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BB%84%E4%BB%B6",
                      "text": "编写交互式组件"
                    },
                    {
                      "text": " 将会教给你 React 的基础：components，props，state。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "#%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87",
                      "text": "状态提升"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "link": true,
                      "url": "#%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6",
                      "text": "使用函数式组件"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "link": true,
                      "url": "#%E5%BC%80%E5%A7%8B%E7%BF%BB%E8%BD%AC",
                      "text": "开始翻转"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "link": true,
                      "url": "#%E6%98%BE%E7%A4%BA%E8%8E%B7%E8%83%9C%E8%80%85",
                      "text": "显示获胜者"
                    },
                    {
                      "text": "会教给你在 React 开发将用到的绝大部分技术。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "#%E5%86%8D%E6%AC%A1%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87",
                      "text": "再次状态提升"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "link": true,
                      "url": "#%E5%B1%95%E7%A4%BA%E7%A7%BB%E5%8A%A8%E5%8E%86%E5%8F%B2",
                      "text": "展示移动历史"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "link": true,
                      "url": "#%E5%8A%A0%E4%B8%8A-key",
                      "text": "加上 key"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "link": true,
                      "url": "#%E5%AE%9E%E7%8E%B0%E6%97%B6%E9%97%B4%E6%97%85%E8%A1%8C",
                      "text": "实现时间旅行"
                    },
                    {
                      "text": " 将会带你深入了解 React 的独特长项。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你不需要一口气学完整篇教程，但是只要你学习了其中的 1-2 个部分就可以收获很多价值，所以如果有时间和精力，你应该尝试着多学几个部分。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "我们将要做什么"
                }
              ],
              "id": "6x-CexZwG"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这篇教程中，我们将为你展示用 React 构建一个交互式的 “井字棋”  游戏。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你可以在这里看到我们的构建成果："
                },
                {
                  "link": true,
                  "url": "https://codepen.io/pftom/pen/xxxaJam?editors=0010",
                  "text": "最终结果"
                },
                {
                  "text": "。如果你现在对代码还不是很理解，如果说你还不熟悉代码语法，别担心！这篇教程的目的就是帮助你理解 React 和它的语法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们推荐你在继续阅读教程之前先检查一下这个 “井字棋” 游戏是怎么运作的。你能看到的其中一个特点就是在游戏棋盘右边有一个有序列表。这个列表向你展示了发生在这个游戏上的移动历史，随着游戏继续，这个历史列表也会变动。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当你对这个 “井字棋” 游戏的运作有一定了解了之后，你就可以关闭它了。在这篇教程中，我们将会以一个简单的代码模板开始。我们的下一步是教会你构建这个游戏。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "COie3yj2q"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们假定你对 HTML 和 JavaScript 有一定了解，但即使你是从其他语言转过来的，你也可以跟着学习。我们也假定你对编程概念如 functions，objects，arrays 有一定了解，最好还知道一点关于 classes 的知识。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你想回顾一下 JavaScript 的知识，我们推荐你阅读"
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript",
                  "text": "这篇指南"
                },
                {
                  "text": "。请注意，我们会使用一些 ES6 的语法 – JavaScript 最近的一个版本。在这篇教程，我们会使用 "
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
                  "text": "arrow functions"
                },
                {
                  "text": "，"
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes",
                  "text": "classes"
                },
                {
                  "text": "，"
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let",
                  "text": "let"
                },
                {
                  "text": "，和 "
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const",
                  "text": "const"
                },
                {
                  "text": "。你可以使用 "
                },
                {
                  "link": true,
                  "url": "https://www.babeljs.cn/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.7.3",
                  "text": "Babel REPL"
                },
                {
                  "text": " 来检查 ES6 代码编译之后的结果。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "开发环境准备"
                }
              ],
              "id": "xYok1U1AK"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "1.确保在你的机器上安装了 "
                },
                {
                  "link": true,
                  "url": "https://nodejs.org/en/",
                  "text": "Node.js"
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "2.使用 Create React App 来创建一个新项目。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npx create-react-app my-app"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd my-app"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm start"
                    }
                  ]
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "注意"
                    },
                    {
                      "text": "第一行的 "
                    },
                    {
                      "code": true,
                      "text": "npx"
                    },
                    {
                      "text": " 不是拼写错误 – 它是 "
                    },
                    {
                      "link": true,
                      "url": "http://www.ruanyifeng.com/blog/2019/02/npx.html",
                      "text": "npm 5.2+ 附带的 package 运行工具"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "link": true,
                  "url": "https://github.com/facebook/create-react-app",
                  "text": "Create React App"
                },
                {
                  "text": " 是一个学习 React 的舒适环境，而且是使用 React 构建一个新的单页应用的最佳方式。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Create React App 不会处理后端逻辑或操纵数据库；它只是创建一个前端构建流水线（build pipeline），所以你可以使用它来配合任何你想使用的后端。它在内部使用 "
                },
                {
                  "link": true,
                  "url": "https://www.babeljs.cn/",
                  "text": "Babel"
                },
                {
                  "text": " 和 "
                },
                {
                  "link": true,
                  "url": "https://webpack.docschina.org/",
                  "text": "Webpack"
                },
                {
                  "text": "，但你无需了解它们的任何细节。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当你准备好部署到生产环境时，执行 "
                },
                {
                  "code": true,
                  "text": "npm run build"
                },
                {
                  "text": " 会在 build 文件夹内生成你应用的优化版本。你能从它的 "
                },
                {
                  "link": true,
                  "url": "https://github.com/facebook/create-react-app#create-react-app--",
                  "text": "README"
                },
                {
                  "text": " 和用户指南了解 "
                },
                {
                  "link": true,
                  "url": "https://create-react-app.dev/",
                  "text": "Create React App"
                },
                {
                  "text": " 的更多信息。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "单页面应用(single-page application)，是一个应用程序，它可以加载单个 HTML 页面，以及运行应用程序所需的所有必要资源（例如 JavaScript 和 CSS）。与页面或后续页面的任何交互，都不再需要再访问服务器加载资源，即页面不会重新加载。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你可以使用 React 来构建单页应用程序，但不是必须如此。React 还可用于增强现有网站的小部分，使其增加额外交互。用 React 编写的代码，可以与服务器端渲染的标记（例如 PHP）或其他客户端库同时使用。实际上，这也正是 Facebook 内部使用 React 的方式。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "3.删除刚刚创建的 "
                },
                {
                  "code": true,
                  "text": "my-app"
                },
                {
                  "text": " 项目 "
                },
                {
                  "code": true,
                  "text": "src/"
                },
                {
                  "text": " 目录下的所有文件。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "注意："
                    },
                    {
                      "text": "**不要删除整个 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹，只需要删除它里面的所有源文件。**我们将在接下来的步骤中在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 中创建我们所需要构建的游戏初始模板代码文件。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "Bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd my-app"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd src"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 如果你在使用 Mac 或者 Linux："
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "rm -f *"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者，你在使用 Windows："
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "del *"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 然后，切回到项目目录文件夹下"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd .."
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "id": "QVI-cyFgP",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "README.md",
          "display": false,
          "id": "aXrvaCB2E",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "50pSvRurk",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/favicon.ico",
          "display": false,
          "id": "WwBVcq-Q5",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/favicon.ico",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/index.html",
          "display": false,
          "id": "527F3hweg",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/index.html",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo192.png",
          "display": false,
          "id": "v-gSuCLB1",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo192.png",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo512.png",
          "display": false,
          "id": "LFvvtDWYl",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo512.png",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/manifest.json",
          "display": false,
          "id": "LI8X2AHMx",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/manifest.json",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/robots.txt",
          "display": false,
          "id": "LjwaveWea",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/robots.txt",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.css",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "4.在 "
                    },
                    {
                      "code": true,
                      "text": "src/"
                    },
                    {
                      "text": " 文件夹下创建一个名为 "
                    },
                    {
                      "code": true,
                      "text": "index.css"
                    },
                    {
                      "text": " 的文件，然后在里面加入下面的 CSS 代码并保存。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.css",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.js",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "5.在 "
                    },
                    {
                      "code": true,
                      "text": "src/"
                    },
                    {
                      "text": " 文件夹下创建一个名为 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 的文件，然后在里面加入如下的 JS 代码并保存。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "6.在 "
                    },
                    {
                      "code": true,
                      "text": "src/"
                    },
                    {
                      "text": " 文件下的 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": "  文件内容的顶部加上下面三行代码："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import React from 'react';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import ReactDOM from 'react-dom';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import './index.css';"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在，如果你在项目文件夹下面运行 "
                    },
                    {
                      "code": true,
                      "text": "npm start"
                    },
                    {
                      "text": " 然后再在浏览器中打开 "
                    },
                    {
                      "code": true,
                      "text": "http://localhost:3000"
                    },
                    {
                      "text": " ，你应该能看到一个空的 “井字棋” 游戏区域。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们推荐你根据"
                    },
                    {
                      "link": true,
                      "url": "https://www.babeljs.cn/docs/editors",
                      "text": "这些指导"
                    },
                    {
                      "text": "来配置你编辑器的语法高亮。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "display": false,
          "id": "kh-BK1aick",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "fd83d85",
              "hiddenLines": [],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "帮帮忙，我遇到了问题！"
                }
              ],
              "id": "925gmF6TR3"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你遇到了问题，可以访问我们的"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/about/",
                  "text": "社区支持"
                },
                {
                  "text": "网站。"
                },
                {
                  "link": true,
                  "url": "https://gitter.im/tuture-dev/tuture",
                  "text": "Gitter"
                },
                {
                  "text": " 是一个很棒的反馈平台，你可以较快的在这上面得到帮助。如果你的问题一直没有得到解答，请给我们提交 "
                },
                {
                  "link": true,
                  "url": "https://github.com/tuture-dev/hub",
                  "text": "Issue"
                },
                {
                  "text": "，我们将会帮助你解决。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "3cf4f5f",
      "id": "1uIaaGgyZf",
      "articleId": "175b717",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "3cf4f5f",
          "id": "keFvfb9fcu",
          "fixed": true,
          "children": [
            {
              "text": "通过 Props 传递数据"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "什么是 React？"
                }
              ],
              "id": "Fjp_MnWCr6"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 是一个用于构建用户界面的声明式的，高效的且灵活的 JavaScript 库。它允许你通过组合一些小且独立的 “组件” 来构建复杂的 用户界面。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 有几种不同的类型的组件，但是他们都继承自 "
                },
                {
                  "code": true,
                  "text": "React.Component"
                },
                {
                  "text": " 类："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class ShoppingList extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <div className=\"shopping-list\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <h1>Shopping List for {this.props.name}</h1>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <li>Instagram</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <li>WhatsApp</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <li>Oculus</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </ul>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// Example usage: <ShoppingList name=\"Mark\" />"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们马上就会了解到上面这些有趣的 类XML 的标签意思。我们使用组件（Components）来告诉 React 我们想在屏幕上看到什么。当我们的数据改变时，React 将会高效的更新并重新渲染我们的组件。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上面的代码中，ShoppingList 是一个 "
                },
                {
                  "bold": true,
                  "text": "React 组件类"
                },
                {
                  "text": "，或者说是 "
                },
                {
                  "bold": true,
                  "text": "React 组件类型"
                },
                {
                  "text": "。组件接受 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 作为参数，然后通过 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法来展示它所返回的视图层级结构。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法返回一个你希望在屏幕上看到内容的描述。React 处理这些描述，并展示其结果。实际上，"
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 返回一个 "
                },
                {
                  "bold": true,
                  "text": "React element"
                },
                {
                  "text": " ，这是对将要渲染内容的一个轻量级描述。大多数的 React 开发者使用被称之为 “JSX” 的特殊语法来编写这些视图层级结构，因为它让编写更简单。"
                },
                {
                  "code": true,
                  "text": "<div />"
                },
                {
                  "text": " 语法在编译时被转换为 "
                },
                {
                  "code": true,
                  "text": "React.createElement('div')"
                },
                {
                  "text": "。上面的代码例子和下面是等价的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "return React.createElement('div', {className: 'shopping-list'},"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  React.createElement('h1', /* ... h1 children ... */),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  React.createElement('ul', /* ... ul children ... */)"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ");"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "link": true,
                  "url": "https://www.babeljs.cn/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=DwEwlgbgBAxgNgQwM5IHIILYFMC8AiJACwHsAHUsAOwHMBaOMJAFzwD4AoKL7r4QgRlYBlEuSrUoAGUZMoAM2IAnKAG8mhRgDpSiskk2VMWAL7AA9AI48ewAK5wr1mw1YBJSswTVFmcy85O3MAuAOqECExIAILkfmCOgVDB8QDyMPa2SHEJ1ub2Obxm4BCsQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.7.3",
                  "text": "查看完整的编译代码。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你对这感到很好奇，"
                },
                {
                  "code": true,
                  "text": "createElement"
                },
                {
                  "text": " 在 React 的 "
                },
                {
                  "link": true,
                  "url": "https://zh-hans.reactjs.org/docs/react-api.html#createelement",
                  "text": "API 文档"
                },
                {
                  "text": "里面有更加详细的描述。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "JSX 能使用 JavaScript 的全部功能。你能在 JSX 的大括号里面放入任何 JavaScript 表达式。每个 React element 也是一个 JavaScript 对象，你可以将它保存在一个变量中，也可以在程序中传递它。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面的 "
                },
                {
                  "code": true,
                  "text": "ShoppingList"
                },
                {
                  "text": " 组件只渲染了一些内建的 DOM 组件，像 "
                },
                {
                  "code": true,
                  "text": "<div />"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "<li />"
                },
                {
                  "text": " 等。但是你也能组合和渲染自定义组件。比如，我们我们现在可以通过 "
                },
                {
                  "code": true,
                  "text": "<ShoppingList />"
                },
                {
                  "text": " 来引用整个购物列表。每个 React 组件都是被封装好的，可以独立的运行；这使得你能使用简单的组件来构建复杂的用户界面。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "了解初始代码"
                }
              ],
              "id": "KFVuoMJ6PP"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在打开项目文件夹里面 "
                },
                {
                  "code": true,
                  "text": "src/index.js"
                },
                {
                  "text": " 代码。这份初始代码是我们将要构建的内容骨架。我们已经添加了 CSS 样式，所以你只需要关注学习 React 以及如何用它编写 “井字棋” 游戏。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过查看代码，我们可以注意到这份代码里面有三个组件："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Square"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Board"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "Game"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Square 组件渲染了单一的一个 "
                },
                {
                  "code": true,
                  "text": "<button>"
                },
                {
                  "text": " ，Board 组件渲染了 9 个 Square 组件。Game 组件渲染了一个 Board 和一些被注释的占位值，在后续的讲解中，我们将会修改这些占位值。目前这份代码中还没有交互式的组件。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.js",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们来尝试修改一些代码，从 Board 组件向 Square 组件传递一些数据。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们强烈推荐你在学习这篇教程的时候跟着动手敲一遍代码，而不是简单的复制/粘贴。这会帮助你形成肌肉记忆并且会有更深层次的理解。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "修改 Board 的 "
                    },
                    {
                      "code": true,
                      "text": "renderSquare"
                    },
                    {
                      "text": " 方法中的代码，传递 "
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " 属性给 Square："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Board extends React.Component {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  renderSquare(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return <Square value={i} />;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "修改 Square 的 "
                    },
                    {
                      "code": true,
                      "text": "render"
                    },
                    {
                      "text": " 方法来展示传进来的 "
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " ，将 "
                    },
                    {
                      "code": true,
                      "text": "{/* TODO */}"
                    },
                    {
                      "text": " 替换成 "
                    },
                    {
                      "code": true,
                      "text": "{this.props.value}"
                    },
                    {
                      "text": "："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Square extends React.Component {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  render() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <button className=\"square\">"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        {this.props.value}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      </button>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当修改完保存之后，如果你的程序运行着，那么你应该能看到如下的变化。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "改之前是这样的："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/tictac-empty-1566a4f8490d6b4b1ed36cd2c11fe4b6-a9336.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "修改之后你将会看到每个 Square 都渲染展示了一个数字："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/tictac-numbers-685df774da6da48f451356f33f4be8b2-be875.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最终 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " 的代码为下面的样子："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "3cf4f5f",
              "hiddenLines": [
                0,
                1,
                2,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/3cf4f5f9b1537ae55cbf676cad574d00986b4b24/src",
                      "text": "查看此时的整个项目代码"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "恭喜你！你刚刚从父组件 Board 传递了 props 给子组件 Sqaure。在 React 中，父组件通过传递 props 给子组件来完成数据的流动。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "dc9cb48",
      "id": "463jYWUi_g",
      "articleId": "175b717",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "dc9cb48",
          "id": "dnAB88NoQu",
          "fixed": true,
          "children": [
            {
              "text": "编写交互式组件"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们在点击 Square 组件时给它填充 “X”。首先，将 Square 组件中的 "
                },
                {
                  "code": true,
                  "text": "render()"
                },
                {
                  "text": " 函数的中返回的 button 标签修改成下面这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Square extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button className=\"square\" onClick={function() { alert('click'); }}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        {this.props.value}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你现在点击 Square，你应该能在浏览器中看到弹出框。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "注意"
                    },
                    {
                      "text": "为了减少打字量和避免 "
                    },
                    {
                      "link": true,
                      "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this",
                      "text": "this 的混淆行为"
                    },
                    {
                      "text": "，在下面和之后的代码中我们将使用"
                    },
                    {
                      "link": true,
                      "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
                      "text": "箭头函数"
                    },
                    {
                      "text": "作为事件处理函数："
                    }
                  ]
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Square extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "     <button className=\"square\" onClick={() => alert('click')}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        {this.props.value}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们使用了 "
                    },
                    {
                      "code": true,
                      "text": "onClick={() => alert('click')}"
                    },
                    {
                      "text": "，我们给 "
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": " 属性传递了一个函数。只有到 button 被点击时，React 才会调用这个函数。忘记 "
                    },
                    {
                      "code": true,
                      "text": "() =>"
                    },
                    {
                      "text": " 而只写了 "
                    },
                    {
                      "code": true,
                      "text": "onClick={alert('click')}"
                    },
                    {
                      "text": "是一个很容易犯的错误，这会导致每次组件重新渲染时都会调用 alert 函数。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在下一步中，我们希望 Square 能 ”记住“ 自己被点击了，同时能填充一个 “X\" 标记。为了 “记住” 事情，组件需要 "
                },
                {
                  "bold": true,
                  "text": "state"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "React 组件通过在 "
                },
                {
                  "code": true,
                  "text": "constructor"
                },
                {
                  "text": " 里面设置 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 的来获得 state。当在组件中定义 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 时，它应该被认为是这个组件的私有属性。让我们在 "
                },
                {
                  "code": true,
                  "text": "this.state"
                },
                {
                  "text": " 中保存 Square 的当前值，然后在 Square 被点击时修改它。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.js",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们修改代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "dc9cb48",
              "hiddenLines": [
                0,
                1,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们来看一看上面的代码做了什么事。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，我们在 Square 类中加入了一个 constructor 来初始化 state。"
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "bold": true,
                          "text": "注意"
                        },
                        {
                          "text": "在 "
                        },
                        {
                          "link": true,
                          "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes",
                          "text": "JavaScript 类"
                        },
                        {
                          "text": "中，当在子类中定义 constructor 时，你总是需要调用 "
                        },
                        {
                          "code": true,
                          "text": "super"
                        },
                        {
                          "text": " 函数。所有有 constructor 的 React 组件类应该在其中首先调用 "
                        },
                        {
                          "code": true,
                          "text": "super(props)"
                        },
                        {
                          "text": " 函数。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后我们修改了 Square 的 "
                    },
                    {
                      "code": true,
                      "text": "render"
                    },
                    {
                      "text": " 方法来展示被点击时的当前的 state 值："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "<button>"
                        },
                        {
                          "text": " 标签里面使用 "
                        },
                        {
                          "code": true,
                          "text": "{this.state.value}"
                        },
                        {
                          "text": " 来替换 "
                        },
                        {
                          "code": true,
                          "text": "{this.props.value}"
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "使用 "
                        },
                        {
                          "code": true,
                          "text": "onClick={() => this.setState({value: 'X'})"
                        },
                        {
                          "text": " 来替换 "
                        },
                        {
                          "code": true,
                          "text": "onClick={...}"
                        },
                        {
                          "text": " 事件处理函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 Square 的 "
                    },
                    {
                      "code": true,
                      "text": "render"
                    },
                    {
                      "text": " 方法中，通过在 "
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": " 处理函数中调用 "
                    },
                    {
                      "code": true,
                      "text": "this.setState"
                    },
                    {
                      "text": " 方法，我们告诉 React ，每当 "
                    },
                    {
                      "code": true,
                      "text": "<button>"
                    },
                    {
                      "text": " 被点击时就重新渲染 Square 组件。在更新之后，Square 的 "
                    },
                    {
                      "code": true,
                      "text": "this.state.value"
                    },
                    {
                      "text": " 将会变成 "
                    },
                    {
                      "code": true,
                      "text": "'X'"
                    },
                    {
                      "text": " ，所以我们能在游戏板上看到 "
                    },
                    {
                      "code": true,
                      "text": "X"
                    },
                    {
                      "text": "。点击任何 Square，都会出现 "
                    },
                    {
                      "code": true,
                      "text": "X"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当你在组件中调用 "
                    },
                    {
                      "code": true,
                      "text": "this.setState"
                    },
                    {
                      "text": " 时，React 将会自动更新这个组件中的所有子组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/dc9cb48160fb9ec8894ff0f6c74524f4c2722780",
                      "text": "查看此时的所有项目代码"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "开发工具"
                    }
                  ],
                  "id": "lKk_oFLJIe"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github-production-release-asset-2e65be.s3.amazonaws.com/221361523/7e14ee00-0961-11ea-8eeb-8b3fab0c9ac0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20191117%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191117T094150Z&X-Amz-Expires=300&X-Amz-Signature=8b9e5dbd0063fa57281f85a54802e45ccb8176607042d5ae06bb55d322bddecf&X-Amz-SignedHeaders=host&actor_id=26423749&response-content-disposition=attachment%3B%20filename%3D4.2.0_0.zip&response-content-type=application%2Foctet-stream",
                      "text": "Chrome"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "link": true,
                      "url": "https://addons.mozilla.org/en-US/firefox/addon/react-devtools/",
                      "text": "Firefox"
                    },
                    {
                      "text": " 的 React Devtools 扩展插件能让你在开发者工具中查看 React 组件树。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": ".tuture/assets/devtools-878d91461c78d8f238e116477dfe0b46-6ca3b.png",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "React DevTools 能让你查看 React 组件的 props 和 state。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当安装完 React DevTools 之后，你使用鼠标右键点击页面上的任意元素，然后在弹出的菜单栏中选择 “检查” 来打开开发者工具，然后你会看到在开发者工具的标签栏最右边会出现 React 标签（“⚛️ Components” and “⚛️ Profiler”）"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "08c001e",
      "id": "jvOuidOfb7",
      "articleId": "175b717",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "08c001e",
          "id": "_p721SK2oo",
          "fixed": true,
          "children": [
            {
              "text": "状态提升"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们目前已经有了 “井字棋” 游戏的基础骨架。为了完成这个游戏，我们需要在游戏板上交替出现 “X\" 和 “O”，并且我们需要一种方式来决定胜者。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "目前，每个 Square 组件都保留着游戏的 state。为了检查胜者，我们需要在一个地方维护这 9 个 Square 的值。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们也许可以想到 Board 可以找每个 Square 要它们的 State。尽管这个方法在 React 中是可行的，但我们不建议你这么做，因为这会使代码编写难于理解，造成隐含的 BUG，并且让重构变得困难。然而，最好的方法是将游戏的 state 保存在 Board 组件中而不是每个 Square 组件中。Board 组件能通过传递 props 告诉每个 Square 该展示什么，"
                },
                {
                  "link": true,
                  "url": "%E9%80%9A%E8%BF%87-props-%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE",
                  "text": "就像我们之前给 Square 传递数字一样"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "bold": true,
                  "text": "为了从多个子组件中收集数据，或者使得两个子组件能相互通信，你需要在它们共有的父组件上面定义共享的 state。父组件能够通过传递 props 将 state 传回给子组件；这使得子组件之间相互同步并且子组件和父组件也保持同步。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "将状态提升到父组件在 React 的组件重构中时很常见的方式 – 让我们抓住这个机会来尝试它。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/index.js",
          "display": true,
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 Board 中添加 constructor，然后设置初始 state 包含一个有 9 个 null 值的数组，对应着 9 个 Square。"
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Board extends React.Component {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "   constructor(props) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "     super(props);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "     this.state = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "       squares: Array(9).fill(null),"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "     };"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "   }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  renderSquare(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return <Square value={i} />;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们之后填充游戏板时，"
                    },
                    {
                      "code": true,
                      "text": "this.state.squares"
                    },
                    {
                      "text": " 数组看起来会像下面这样："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "["
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  'O', null, 'X',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  'X', 'X', 'O',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  'O', null, null,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "]"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Board 的 "
                    },
                    {
                      "code": true,
                      "text": "renderSquare"
                    },
                    {
                      "text": " 方法目前看起来是这样的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "renderSquare(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return <Square value={i} />;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "一开始，我们从 Board "
                    },
                    {
                      "link": true,
                      "url": "#%E9%80%9A%E8%BF%87-props-%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE",
                      "text": "向下传递 props "
                    },
                    {
                      "text": "值给 Square 来展示从 0-9 的数字。之后，我们通过 "
                    },
                    {
                      "link": true,
                      "url": "#%E7%BC%96%E5%86%99%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BB%84%E4%BB%B6",
                      "text": "Square 的自带 state"
                    },
                    {
                      "text": " 将数字设置成 “X”。这就是为什么 Square 目前忽略了通过 Board 传下来的 "
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " 值。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在，我们将再次使用传递 props 的机制。我们通过修改 Board 组件来指导每个 Square 当前的值（"
                    },
                    {
                      "code": true,
                      "text": "'X', "
                    },
                    {
                      "text": "'O’"
                    },
                    {
                      "code": true,
                      "text": ", 或者 "
                    },
                    {
                      "text": "null"
                    },
                    {
                      "code": true,
                      "text": "）。我们已经在 Board 的 constructor 中定义了 "
                    },
                    {
                      "text": "squares"
                    },
                    {
                      "code": true,
                      "text": " 数组，现在我们将修改 Board 的"
                    },
                    {
                      "text": "renderSquare` 方法来读取它。"
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "renderSquare(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return <Square value={this.state.squares[i]} />;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在每个 Square 将会接收 "
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " props，它的值可能是 "
                    },
                    {
                      "code": true,
                      "text": "'X'"
                    },
                    {
                      "text": "，"
                    },
                    {
                      "code": true,
                      "text": "'O'"
                    },
                    {
                      "text": " 或者 "
                    },
                    {
                      "code": true,
                      "text": "null"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来，当 Square 被点击时，我们需要作出相应的改变。现在 Board 组件维护着 Square 的填充值数组 squares。我们需要创造一种在 Square 中更新 Board 的 state 值的方式。因为 state 被认为是它所在定义的组件的私有属性，我们不能直接在 Square 中更新 Board 的 state 值。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "取而代之的是，我们从 Board 给 Square 传递一个函数，当 Square 被点击时，我们调用这个函数。我们修改 Board 的 "
                    },
                    {
                      "code": true,
                      "text": "renderSquare"
                    },
                    {
                      "text": " 方法如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "renderSquare(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <Square"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        value={this.state.squares[i]}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        onClick={() => this.handleClick(i)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      />"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "bold": true,
                          "text": "注意"
                        },
                        {
                          "text": "为了可读性，我们将返回的代码分割成多行代码，然后在两端加上了圆括号，这样 JavaScript 就不会在 return 后面加上分号来破坏我们的代码。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们现在从 Board 给 Square 传递了两个 props："
                    },
                    {
                      "code": true,
                      "text": "value"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": " 。"
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": " 参数是是一个函数，当 Square 被点击时就会调用它。我们将对 Square 做如下的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 Square 的 "
                        },
                        {
                          "code": true,
                          "text": "render"
                        },
                        {
                          "text": " 方法中，用 "
                        },
                        {
                          "code": true,
                          "text": "this.props.value"
                        },
                        {
                          "text": " 来替换 "
                        },
                        {
                          "code": true,
                          "text": "this.state.value"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 Square 的 "
                        },
                        {
                          "code": true,
                          "text": "render"
                        },
                        {
                          "text": " 方法中，用 "
                        },
                        {
                          "code": true,
                          "text": "this.props.onClick()"
                        },
                        {
                          "text": " 来替换 "
                        },
                        {
                          "code": true,
                          "text": "this.setState"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "删除 Square 中的 "
                        },
                        {
                          "code": true,
                          "text": "constructor"
                        },
                        {
                          "text": " ，因为 Square 不再追踪游戏的 state。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在做出上面的改变修改之后，Square 组件变成了下面这样："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Square extends React.Component {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  render() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <button"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        className=\"square\""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        onClick={() => this.props.onClick()}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      >"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        {this.props.value}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      </button>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当 Square 被点击时，由 Board 提供的 "
                    },
                    {
                      "code": true,
                      "text": "onClick"
                    },
                    {
                      "text": " 函数就会调用。下面是对我们上面所做的一个回顾："
                    }
                  ]
                },
                {
                  "type": "numbered-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在内建 DOM 元素  "
                        },
                        {
                          "code": true,
                          "text": "<button>"
                        },
                        {
                          "text": " 组件上的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " 属性告知 React 要设定一个事件监听器。"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 1
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "当 button 被点击时，React 将会调用在 Square 的 "
                        },
                        {
                          "code": true,
                          "text": "render()"
                        },
                        {
                          "text": " 方法里定义的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " 事件处理函数。"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 2
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "事件处理函数会调用 "
                        },
                        {
                          "code": true,
                          "text": "this.props.onClick()"
                        },
                        {
                          "text": "。Square 的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " props 是由 Board 传下来的。"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 3
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "因为 Board 将 "
                        },
                        {
                          "code": true,
                          "text": "onClick={() => this.handleClick(i)} 传给 Square，所以当 Square 被点击时，就会调用 "
                        },
                        {
                          "text": "this.handleClick(i)` 方法。"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 4
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们目前还没有定义 "
                        },
                        {
                          "code": true,
                          "text": "handleClick(i)"
                        },
                        {
                          "text": " ，所以当点击 Square 之后，我们的程序就崩掉了，你应该可以看到有着像 “this.handleClick is not a function” 这样的红色的错误提示出现在屏幕上。"
                        }
                      ],
                      "parent": "numbered-list",
                      "level": 0,
                      "number": 5
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "bold": true,
                          "text": "注意"
                        },
                        {
                          "code": true,
                          "text": "button"
                        },
                        {
                          "text": " DOM 元素的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " 属性对 React 来说有特殊的意义，因为它是内建的组件。对于自定义组件，像 Square ，起名字取决于你。我们可以给 Square 的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " props 和 Board 的 "
                        },
                        {
                          "code": true,
                          "text": "handleClick"
                        },
                        {
                          "text": " 方法起任何名字，代码都会如期运行。在 React 中，我们约定使用 "
                        },
                        {
                          "code": true,
                          "text": "on[Event]"
                        },
                        {
                          "text": " props 来代表事件，"
                        },
                        {
                          "code": true,
                          "text": "handle[Event]"
                        },
                        {
                          "text": " 来代表事件处理方法。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们尝试点击 Square 时，程序会崩溃，因为我们目前还没有在 Board 定义 "
                    },
                    {
                      "code": true,
                      "text": "handleClick"
                    },
                    {
                      "text": "  方法，我们将马上加上它："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Board extends React.Component {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  constructor(props) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    super(props);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.state = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      squares: Array(9).fill(null),"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    };"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  handleClick(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const squares = this.state.squares.slice();"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    squares[i] = 'X';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.setState({squares: squares});"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  renderSquare(i) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <Square"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        value={this.state.squares[i]}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        onClick={() => this.handleClick(i)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      />"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  render() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const status = 'Next player: X';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        <div className=\"status\">{status}</div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        <div className=\"board-row\">"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(0)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(1)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(2)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        </div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        <div className=\"board-row\">"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(3)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(4)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(5)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        </div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        <div className=\"board-row\">"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(6)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(7)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          {this.renderSquare(8)}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        </div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      </div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们的代码看起来像下面这样："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "08c001e",
              "hiddenLines": [
                0,
                1,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "link": true,
                  "url": "https://github.com/pftom/react101/tree/08c001e3dd2fd255ebb842f65a697344cf090c44",
                  "text": "查看目前所有的项目代码"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在经过上面的修改之后，我们现在应该又可以点击 Square 然后填充 “X” 了，就像我们之前的效果一样。然而，现在游戏的 state 统一保存在 Board 组件中而不是各个 Square 组件中。当 Board 的 state 改变时，Square 组件将会自动重新渲染。将所有的 Square 的 state 保存在 Board 组件中能让我们在之后判断获胜者。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为 Square 组件不再维护 state，它从 Board 组件接收 "
                },
                {
                  "code": true,
                  "text": "value"
                },
                {
                  "text": " ，然后在被点击时，通知 Board 修改 state。用 React 的术语说，Square 组件现在是一个受控组件。Board 组件现在完全控制着它们。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "注意到在 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 方法中，我们在数组上调用了 "
                },
                {
                  "code": true,
                  "text": ".slice()"
                },
                {
                  "text": " 方法来创建一个 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 的拷贝而不是直接修改它。我们将在下部分讲解为何我们要创建 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 的拷贝。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "b72c6b1",
      "id": "c5fC9LtW1g",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "b72c6b1",
          "id": "5esTRYd7c0",
          "fixed": true,
          "children": [
            {
              "text": "使用函数式组件"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "为什么不变性是很重要的"
                }
              ],
              "id": "bOePUaejkI"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前的代码例子中，我们建议你使用 "
                },
                {
                  "code": true,
                  "text": ".slice()"
                },
                {
                  "text": " 方法来创建 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 的一份拷贝而不是直接修改它。我们将马上讨论不变形以及为什么不变形是值得学习的。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一般有两种方式修改数据。第一种方法就是通过直接修改数据的值让数据产生突变。第二种方法是在数据的拷贝上做修改然后替代原数据。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "突变式的数据修改："
                }
              ],
              "id": "yE7ewG7ujG"
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "var player = {score: 1, name: 'Jeff'};"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "player.score = 2;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// Now player is {score: 2, name: 'Jeff'}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "非突变式的数据修改："
                }
              ],
              "id": "whEH7XK9PT"
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "var player = {score: 1, name: 'Jeff'};"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "var newPlayer = Object.assign({}, player, {score: 2});"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 现在 player 没有被修改，但是 newPlayer 的值却变成了 {score: 2, name: 'Jeff'}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 或者你想使用对象结构语法，你可以这样写："
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// var newPlayer = {...player, score: 2};"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "即使没有突变的修改数据，最终的结果却是一样的，我们马上来说一下这样做的几个好处。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "复杂的功能变简单"
                }
              ],
              "id": "D3jzahLvLy"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "不可变性使得复杂的功能变得很容易实现。在这篇教程的后面，我们将会实现一个 “时间旅行” 功能，它使得我们的 “井字棋” 游戏能显示游戏的历史，并且可以 “跳回” 到之前的步骤。这个功能不是这个游戏才有的 – 拥有 “撤销” 和 “重做” 功能是目前应用的一个很通用的需求。避免直接对数据进行突变式的修改使得我们能够保存先前版本游戏记录的完整历史，并在之后重新使用。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "追踪改变"
                }
              ],
              "id": "fh_yI7QMs5"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "追踪改变对于突变的对象来说是很困难的因为它们直接被修改了。我们需要遍历整个对象树，然后比较突变对象和它之前的拷贝来追踪这种变化。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "追踪改变对于不变的对象来说是相当简单的。如果这个不变的对象的引用和之前的不一样了，那么它就改变了。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "判断什么时候该在 React 中重新渲染"
                }
              ],
              "id": "-Q3dVcSyD-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "不变形的主要优点是它帮助你在 Reac 构建纯组件。不变的数据能很容易判断是否发生了变化，我们以此来决定一个组件是否需要重新渲染。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你能 "
                },
                {
                  "code": true,
                  "text": "shouldComponentUpdate()"
                },
                {
                  "text": " 学到更多关于不变性的知识，以及通过阅读"
                },
                {
                  "link": true,
                  "url": "https://zh-hans.reactjs.org/docs/optimizing-performance.html#examples",
                  "text": "性能优化"
                },
                {
                  "text": "来学习如何构建纯组件。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "什么是函数式组件"
                }
              ],
              "id": "L25wqRS7J_"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将马上将 Square 改成一个函数式组件。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 React 中，函数式组件是一种编写组件的简单写法，你只需要包含 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法里面的内容，并且不需要 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 。我们通过编写函数，接收 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " 作为输入，然后返回需要渲染的内容来定义组件，而不是之前通过定义继承自 "
                },
                {
                  "code": true,
                  "text": "React.Component"
                },
                {
                  "text": " 的类来定义组件。函数式组件没有类组件那么冗长，并且大多数的组件都能通过这样的方式来定义。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "用下面的这个函数来取代 Square 类："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function Square(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <button className=\"square\" onClick={props.onClick}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      {props.value}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们已经将两处 "
                },
                {
                  "code": true,
                  "text": "this.props"
                },
                {
                  "text": " 出现的位置改成了 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": "。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "OASIJkIhAi",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最终我们的代码变成了这样："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "b72c6b1",
              "hiddenLines": [
                0,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/b72c6b192d1de1a243d17e2237982230b83b4176",
                      "text": "查看此时的所有项目代码"
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "bold": true,
                          "text": "注意"
                        },
                        {
                          "text": "当我们将 Square 修改成函数式组件之后，我们也将 "
                        },
                        {
                          "code": true,
                          "text": "onClick={() => this.props.onClick()}"
                        },
                        {
                          "text": " 改成了更短的 "
                        },
                        {
                          "code": true,
                          "text": "onClick={props.onClick}"
                        },
                        {
                          "text": " （注意到大括号内的前后都没有了圆括号）"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "f423342",
      "id": "_Y6zisITtN",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "f423342",
          "id": "b6yYEE1_-V",
          "fixed": true,
          "children": [
            {
              "text": "开始翻转"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在我们需要修复之前的缺陷 – 在之前我们的 “井字棋” 游戏中，“O“ 出现不了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将把第一步移动默认设置为 “X”。我们可以在 Board 的 "
                },
                {
                  "code": true,
                  "text": "constructor"
                },
                {
                  "text": " 里面修改它："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Board extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  constructor(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    super(props);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.state = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      squares: Array(9).fill(null),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: true,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "每当一个选手移动一步，"
                },
                {
                  "code": true,
                  "text": "xIsNext"
                },
                {
                  "text": "  （一个布尔值）将会翻转来判断下一个选手将会出现什么，并且翻转后的状态会被保存在 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 里面。我们将修改 Board 的 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 函数来翻转 "
                },
                {
                  "code": true,
                  "text": "xIsNext"
                },
                {
                  "text": " 的值："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "handleClick(i) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const squares = this.state.squares.slice();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares[i] = this.state.xIsNext ? 'X' : 'O';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.setState({"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      squares: squares,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: !this.state.xIsNext,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "gcxDsZoeWN",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当保存上面的改变之后，你的 Board 组件看起来应该是这样的："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "f423342",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                31,
                32,
                33,
                34,
                35,
                36,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/f423342ec01b616665f25b5734ef36e1bf7a4157",
                      "text": "查看此时的所有项目代码"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "e999aee",
      "id": "JjZkk2SfCi",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "e999aee",
          "id": "RJwiyimmha",
          "fixed": true,
          "children": [
            {
              "text": "显示获胜者"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "ksoVkPVaht",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存上面所做的修改，目前你的 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " 的内容应该看起来是这样子的："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "e999aee",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/e999aeecb3fff63ae8c3037ed422b1a377cb90bc",
                      "text": "查看此时所有项目代码"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "恭喜你！你现在已经有一个可以运行的 “井字棋” 游戏了。并且你还学习了 React 的基础知识。所以你可能是这里面真正的赢家！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "eaccb8e",
      "id": "e1gW4qd5fv",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "eaccb8e",
          "id": "gv9a6wve4C",
          "fixed": true,
          "children": [
            {
              "text": "再次状态提升"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "作为最后的练习，让我们使得游戏 “回到过去” 变得可能。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "保存移动的历史"
                }
              ],
              "id": "siseKFv2E-"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果我们突变式的修改了 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 数组，实现时间旅行就会变得很困难。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然而，我们在每步移动都使用了 "
                },
                {
                  "code": true,
                  "text": "slice()"
                },
                {
                  "text": " 来创建 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 数组的一份新的拷贝，将其看做是"
                },
                {
                  "link": true,
                  "url": "#%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6",
                  "text": "不可变的"
                },
                {
                  "text": "。这使得我们可以保存 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 数组的每一步历史版本，然后在在已经发生的移动历史之间跳转。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将把 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 数组的历史版本保存到另外一个 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 数组中。"
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 代表了从游戏开始到上一步移动所有棋盘格的状态。它看起来是下面这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "history = ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // Before first move"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares: ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // After first move"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares: ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, 'X', null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // After second move"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares: ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, 'X', null,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      null, null, 'O',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ]"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在我们需要思考，那个组件应该保存 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 状态。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们想让顶层的 Game 组件来展示历史移动列表。这需要获取 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 才能做到，所以我们把 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 移动到顶层的 Game 组件的 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 中来。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "将 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 状态移动到 Game 组件中之后，我们需要将 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " state 从它的子组件 Board 中删除。就像我们之前将 Square 组件中的"
                },
                {
                  "link": true,
                  "url": "#%E7%8A%B6%E6%80%81%E6%8F%90%E5%8D%87",
                  "text": "状态提升"
                },
                {
                  "text": "到 Board 组件中一样，我们现在将状态从 Board 组件提升到顶层的 Game 组件中。这使得 Game 组件完全控制了 Board 的数据，并且使得它可以操纵 Board 组件来渲染之前的移动状态。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，我们将在 Game 的 constructor 中来设置它的初始状态："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Game extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  constructor(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    super(props);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.state = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      history: [{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        squares: Array(9).fill(null),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      }],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: true,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <div className=\"game\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"game-board\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <Board />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"game-info\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <div>{/* status */}</div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <ol>{/* TODO */}</ol>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来，我们将修改 Board 组件，使得它接收来自 Game 组件的 "
                },
                {
                  "code": true,
                  "text": "squares"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "onClick"
                },
                {
                  "text": " props。因为目前我们在 Board 组件上定义了唯一的一个点击处理函数来处理众多的 Square 的点击事件，所以为了指示那个 Square 被点击了，我们需要通过它的 "
                },
                {
                  "code": true,
                  "text": "onClick"
                },
                {
                  "text": " 事件处理函数传递它所在的位置。下面是迁移 Board 组件所必须的步骤："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "删除 Board 里面的 "
                    },
                    {
                      "code": true,
                      "text": "constructor"
                    },
                    {
                      "text": " 。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在 Board 的 "
                    },
                    {
                      "code": true,
                      "text": "renderSquare"
                    },
                    {
                      "text": " 里面将 "
                    },
                    {
                      "code": true,
                      "text": "this.state.squares[i]"
                    },
                    {
                      "text": " 替换层 "
                    },
                    {
                      "code": true,
                      "text": "this.props.squares[i]"
                    },
                    {
                      "text": " 。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在 Board 的 "
                    },
                    {
                      "code": true,
                      "text": "renderSquare"
                    },
                    {
                      "text": " 里面将 "
                    },
                    {
                      "code": true,
                      "text": "this.handleClick(i)"
                    },
                    {
                      "text": " 替换成 "
                    },
                    {
                      "code": true,
                      "text": "this.props.handleClick(i)"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Board 组件现在看起来是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Board extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  handleClick(i) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const squares = this.state.squares.slice();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    if (calculateWinner(squares) || squares[i]) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares[i] = this.state.xIsNext ? 'X' : 'O';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.setState({"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      squares: squares,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: !this.state.xIsNext,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  renderSquare(i) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <Square"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        value={this.props.squares[i]}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        onClick={() => this.props.onClick(i)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const winner = calculateWinner(this.state.squares);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let status;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    if (winner) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      status = 'Winner: ' + winner;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    } else {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"status\">{status}</div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"board-row\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(0)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(1)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(2)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"board-row\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(3)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(4)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(5)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"board-row\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(6)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(7)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          {this.renderSquare(8)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将更新 Game 组件的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 函数来使用最新历史记录，并通过这一历史记录来展示游戏的状态："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为 Game 组件目前已经渲染了游戏的状态，我们可以删除 Board 组件的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法里面对于的代码了。当我们重构完，Board 的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法看起来像这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "diff",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   const history = this.state.history;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   const current = history[history.length - 1];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   const winner = calculateWinner(current.squares);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   let status;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   if (winner) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "     status = 'Winner: ' + winner;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   } else {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "     status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "   }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <div className=\"game\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <div className=\"game-board\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "         <Board"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "           squares={current.squares}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "           onClick={(i) => this.handleClick(i)}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "         />"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "       </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "       <div className=\"game-info\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "         <div>{status}</div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          <ol>{/* TODO */}</ol>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    );"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最终，我们需要把 Board 里面的 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 方法移动到 Game 组件中。我们还需要对 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 做出一点修改，因为 Game 组件的 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 结构不一样。在 Game 的 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 方法中，我们将新的历史记录条目添加到 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": " 中。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "handleClick(i) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const history = this.state.history;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const current = history[history.length - 1];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const squares = current.squares.slice();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    if (calculateWinner(squares) || squares[i]) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares[i] = this.state.xIsNext ? 'X' : 'O';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.setState({"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      history: history.concat([{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        squares: squares,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      }]),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: !this.state.xIsNext,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "注意"
                    },
                    {
                      "text": "不像你熟悉的 "
                    },
                    {
                      "code": true,
                      "text": "push()"
                    },
                    {
                      "text": " 方法，"
                    },
                    {
                      "code": true,
                      "text": "concat()"
                    },
                    {
                      "text": " 方法不会突变式的修改原数组，所以我们更青睐它。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在，Board 组件只需要 "
                },
                {
                  "code": true,
                  "text": "renderSquare"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法了。游戏的状态和 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 方法都定义在 Game 组件中。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "SHoReZJA8o",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当保存上面的修改之后，现在我们的 "
                    },
                    {
                      "code": true,
                      "text": "src/index.js"
                    },
                    {
                      "text": " 应该是这样的："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "eaccb8e",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/eaccb8e7a87389e541b684a30cf5e201b2439c2b",
                      "text": "查看此时所有项目代码"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "b61a7ff",
      "id": "pfRgRB9lG_",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "b61a7ff",
          "id": "UKNFNAaAbP",
          "fixed": true,
          "children": [
            {
              "text": "展示移动历史"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为我们记录了井字棋游戏的历史，我们现在可以将这份历史列表展示给玩家。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们之前学到，React 元素是 JavaScript 对象；我们可以在应用中传递它们。为了渲染多个元素，我们可以一个 React 元素数组。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在 JavaScript 中，数组有一个 "
                },
                {
                  "link": true,
                  "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
                  "text": "map() 方法"
                },
                {
                  "text": "，普遍的用于将一份数据映射到另外一份数据，例如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const numbers = [1, 2, 3];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const doubled = numbers.map(x => x * 2); // [2, 4, 6]"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "使用 "
                },
                {
                  "code": true,
                  "text": "map"
                },
                {
                  "text": " 方法，我们可以将移动的历史映射成展示在屏幕上的 React button 元素。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们在 Game 的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法里来 "
                },
                {
                  "code": true,
                  "text": "map"
                },
                {
                  "text": " 我们的 "
                },
                {
                  "code": true,
                  "text": "history"
                },
                {
                  "text": "："
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "d9OMqbljvK",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "b61a7ff",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/b61a7ff4be8309405687f619a043490864065d89",
                      "text": "查看此时全部项目代码"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对于井字棋游戏历史里的每一步移动，我们都创建了一个包含 "
                },
                {
                  "code": true,
                  "text": "<button>"
                },
                {
                  "text": " 的列表元素包含 "
                },
                {
                  "code": true,
                  "text": "<li>"
                },
                {
                  "text": " 。Button 有一个 "
                },
                {
                  "code": true,
                  "text": "onClick"
                },
                {
                  "text": " 处理函数来调用 "
                },
                {
                  "code": true,
                  "text": "this.jumpTo()"
                },
                {
                  "text": "。我们目前还没有实现 "
                },
                {
                  "code": true,
                  "text": "jumpTo()"
                },
                {
                  "text": " 方法。现在我们应该可以看到游戏板旁边出现了一列移动记录，并且在我们的开发者工具控制台里面会显示下面的警告："
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "Warning: Each child in an array or iterator should have a unique “key” prop. Check the render method of “Game”."
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "让我们来讨论一下上面的警告的含义。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "859840a",
      "id": "cSxWnHG_bC",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "859840a",
          "id": "C9JmLES5TD",
          "fixed": true,
          "children": [
            {
              "text": "加上 key"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们渲染一个列表时，React 会保存一些关于渲染列表元素的信息。当我们更新列表时，React 需要判断哪些元素改变了。我们可能添加、删除、重排列或者更新了列表元素。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "想象一下下面的改变，从："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<li>Alexa: 7 tasks left</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<li>Ben: 5 tasks left</li>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<li>Ben: 9 tasks left</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<li>Claudia: 8 tasks left</li>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<li>Alexa: 5 tasks left</li>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "除了更新计数，一个人来看上面的改变可能会说：“我们交换了 Alexa 和 Ben 的顺序，然后再 Alexa 和 Ben 中间插入了 Claudia。然而，React 是一个计算机程序，它无法理解我们的意思。因为 React 不知道我们的目的，所以我们需要给每个元素列表指定一个 "
                },
                {
                  "italic": true,
                  "bold": true,
                  "text": "key"
                },
                {
                  "text": " 属性来区分它的邻近元素。一种选项是使用字符串 "
                },
                {
                  "code": true,
                  "text": "alexa"
                },
                {
                  "text": "，"
                },
                {
                  "code": true,
                  "text": "ben"
                },
                {
                  "text": "，"
                },
                {
                  "code": true,
                  "text": "claudia"
                },
                {
                  "text": "。如果我们展示来自数据库的数据，Alexa，Ben 和 Claudia 的数据库 ID 可以作为 key 使用："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "<li key={user.id}>{user.name}: {user.taskCount} tasks left</li>"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当一个列表重新渲染的时候，React 通过查看每个元素的 key ，并且搜索先前列表查看是否有对应的匹配元素。如果目前的列表存在一个之前没有的 key，React 会创建一个组件。如果当前列表相比先前列表丢失了一个 key，React 会销毁之前的组件。如果两个 key 相匹配，React 会把之前的组件直接挪过来用。Keys 告诉 React 每个组件的身份，这使得 React 可以在重新渲染时维护状态。如果组件的 key 变了，那么这个组件会被销毁，然后使用新的 state 来重新创建这个组件。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 在 React 中是一个特殊的保留属性（就像 "
                },
                {
                  "code": true,
                  "text": "ref"
                },
                {
                  "text": " 一样 – 一个更加高级的特性）。当一个元素被创建后，React 会提取出它的  "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 属性，然后将这个 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 直接保存在返回的元素里面。即使 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 看上去属于 "
                },
                {
                  "code": true,
                  "text": "props"
                },
                {
                  "text": " ，"
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 不能够使用 "
                },
                {
                  "code": true,
                  "text": "this.props.key"
                },
                {
                  "text": " 来引用。React 自动的使用 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 来决定组件是否更新。我们无法获取组件的 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 值。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "bold": true,
                  "text": "无论你何时构建一个动态列表组件，我们都强烈推荐你给列表元素赋予 "
                },
                {
                  "bold": true,
                  "code": true,
                  "text": "key"
                },
                {
                  "bold": true,
                  "text": " 属性。"
                },
                {
                  "text": " 如果你的数据没有合适的 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " ，你可以要考虑重构你是数据来确保它有。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果没有指定 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " ，React 将在控制台打印一条警告，然后默认使用数组的索引作为 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 。使用数据的所有作为 "
                },
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 有时候会产生问题，比如当你尝试对列表重排序或者插入或删除列表元素时。显式的传递 "
                },
                {
                  "code": true,
                  "text": "key={i}"
                },
                {
                  "text": " 会使得警告被去掉，但是和默认使用索引一样会产生问题，并且在绝大多数情况下是不被推荐的。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "code": true,
                  "text": "key"
                },
                {
                  "text": " 不需要全局唯一；它们只需要在组件和它们的兄弟节点间唯一。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "TxPsf27dBt",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在井字棋游戏历史记录中，每个过去的移动步骤都有一个唯一的 ID 与之关联：那就是这个移动步骤的顺序数字。因为这些移动步骤不会重排列，被删除或者在中间新插入步骤，所以使用移动步骤列表的所有是安全的。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 Game 组件的 "
                    },
                    {
                      "code": true,
                      "text": "render"
                    },
                    {
                      "text": " 方法中。我们给 "
                    },
                    {
                      "code": true,
                      "text": "<li>"
                    },
                    {
                      "text": " 元素加上 "
                    },
                    {
                      "code": true,
                      "text": "key"
                    },
                    {
                      "text": " ，然后 React 的关于 "
                    },
                    {
                      "code": true,
                      "text": "key"
                    },
                    {
                      "text": " 的警告应该就消失了："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "859840a",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/859840a10ed3f7db69d131f3f3d81f14a924621d",
                      "text": "查看此时所有项目代码"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "4493d81",
      "id": "IwxyCepJwb",
      "articleId": 3697248,
      "children": [
        {
          "type": "heading-two",
          "commit": "4493d81",
          "id": "I9AtUatIIO",
          "fixed": true,
          "children": [
            {
              "text": "实现时间旅行"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当你点击任何一个列表元素按钮会触发错误，因为 "
                },
                {
                  "code": true,
                  "text": "jumpTo"
                },
                {
                  "text": " 方法还没有定义。在我们实现 "
                },
                {
                  "code": true,
                  "text": "jumpTo"
                },
                {
                  "text": " 方法之前，我们将给 Game 组件的 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 加上 "
                },
                {
                  "code": true,
                  "text": "stepNumber"
                },
                {
                  "text": " 来标志目前我们所看到的步骤。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先，在 Game 的 "
                },
                {
                  "code": true,
                  "text": "constructor"
                },
                {
                  "text": " 的初始 "
                },
                {
                  "code": true,
                  "text": "state"
                },
                {
                  "text": " 里面加上 "
                },
                {
                  "code": true,
                  "text": "stepNumber: 0"
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "diff",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class Game extends React.Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  constructor(props) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    super(props);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.state = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      history: [{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        squares: Array(9).fill(null),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      }],"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      stepNumber: 0,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: true,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接着，我们将在 Game 里面定义 "
                },
                {
                  "code": true,
                  "text": "jumpTo"
                },
                {
                  "text": " 方法来更新 "
                },
                {
                  "code": true,
                  "text": "stepNumber"
                },
                {
                  "text": " 。并且当 "
                },
                {
                  "code": true,
                  "text": "stepNumber"
                },
                {
                  "text": " 是偶数时，我们将把 "
                },
                {
                  "code": true,
                  "text": "xIsNext"
                },
                {
                  "text": " 设置为 true。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "handleClick(i) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    // this method has not changed"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  jumpTo(step) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.setState({"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      stepNumber: step,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: (step % 2) === 0,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    // this method has not changed"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们将对 Game 的 "
                },
                {
                  "code": true,
                  "text": "handleClick"
                },
                {
                  "text": " 做一点修改 – 就是那个当你点击 Square 会触发调用的方法。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们现在加入了 "
                },
                {
                  "code": true,
                  "text": "stepNumber"
                },
                {
                  "text": " state 来表示当前展示给用户的步骤。当我们进行了一步新的移动时，我们需要在 "
                },
                {
                  "code": true,
                  "text": "this.setState"
                },
                {
                  "text": " 语句中加入 "
                },
                {
                  "code": true,
                  "text": "stepNumber: history.length"
                },
                {
                  "text": " 来更新 "
                },
                {
                  "code": true,
                  "text": "stepNumber"
                },
                {
                  "text": " 。这确保在移动了新的一步的时候不会错误的显示相同的移动步骤。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们还需要将之前读取 "
                },
                {
                  "code": true,
                  "text": "this.state.history"
                },
                {
                  "text": " 更新成读取 "
                },
                {
                  "code": true,
                  "text": "this.state.history.slice(0, this.state.stepNumber + 1)"
                },
                {
                  "text": "。这确保我们 ”回到过去“ 时，再从这个点进行新的移动，我们需要丢掉过去从这个点开始的 “未来” 的历史记录，因为它们现在已经变得不在正确了。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "handleClick(i) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const history = this.state.history.slice(0, this.state.stepNumber + 1);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const current = history[history.length - 1];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const squares = current.squares.slice();"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    if (calculateWinner(squares) || squares[i]) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      return;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    squares[i] = this.state.xIsNext ? 'X' : 'O';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    this.setState({"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      history: history.concat([{"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        squares: squares"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      }]),"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      stepNumber: history.length,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      xIsNext: !this.state.xIsNext,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    });"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最终，我们将修改 Game 组件的 "
                },
                {
                  "code": true,
                  "text": "render"
                },
                {
                  "text": " 方法，从之前总是渲染最后一个步骤变成根据 "
                },
                {
                  "code": true,
                  "text": "stepNumber"
                },
                {
                  "text": " 渲染目前选中的步骤。"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const history = this.state.history;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const current = history[this.state.stepNumber];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const winner = calculateWinner(current.squares);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    // the rest has not changed"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果我们点击游戏历史记录的任一步骤，这个井字棋游戏板就会立即更新，去展示当时这个步骤的样子。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.js",
          "display": true,
          "id": "pIxzQcuXSK",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存上面的修改，你的代码将是这个样子："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.js",
              "commit": "4493d81",
              "hiddenLines": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146
              ],
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "link": true,
                      "url": "https://github.com/pftom/react101/tree/4493d81d35c04e9dbc7075703b4146aee647db82",
                      "text": "查看此时全部项目代码"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "总结一下"
                }
              ],
              "id": "qXiFdCD9fY"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "恭喜你！你已经创建了一个井字棋游戏："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "可以让你看井字棋游戏，"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在选手获得胜利时会给予显示，"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "将游戏的历史记录保存为游戏进度，"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "允许玩家回顾游戏的历史记录以及跳转到之前的游戏步骤。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "做的好！我们期望你现在已经对 React 有一个很深刻的理解了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "点击这个链接查看最终的结果："
                },
                {
                  "link": true,
                  "url": "https://codepen.io/huan1043269994/pen/JjjaBBw",
                  "text": "最终结果。"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}